name: Release Template

on:
  workflow_call:
    inputs:
      owner:
        required: true
        type: string
      repository:
        required: true
        type: string
      previous_released_version:
        required: false
        type: string
      release_version:
        required: true
        type: string
      next_development_version:
        required: true
        type: string
      branch:
        required: false
        type: string
      jreleaser_file:
        required: true
        type: string
      skip_maven_release:
        description: If "true" we won't execute "mvn deploy" but just "mvn install" to avoid releasing to Maven Central
        required: false
        default: false
        type: boolean
      cache_key:
        description: The cache key to restore after java-setup
        required: true
        type: string
      cache_key_to_restore:
        description: The cache key to create after post java-setup
        required: true
        type: string
      run_before:
        required: false
        type: string
      run_after:
        required: false
        type: string
      java-version:
        required: false
        type: string
        default: 11
    secrets:
      GITHUB_PAT:
        required: true
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD:
        required: true
      GPG_PRIVATE_KEY:
        required: true
      GPG_PASSPHRASE:
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CI
        uses: actions/checkout@v3
        with:
          path: ci
      - name: Checkout ${{ inputs.repository }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.owner }}/${{ inputs.repository }}
          path: repository
          fetch-depth: 0
          token: ${{ secrets.GITHUB_PAT }}
          ref: ${{ inputs.branch }}
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ inputs.java-version }}
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.7
      - name: Setup other tools
        run: |
          sudo apt-get install -y groovy
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ inputs.cache_key }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ inputs.cache_key_to_restore }}-${{ github.run_id }}

      - name: Run Before script
        if: ${{ inputs.run_before }}
        run: |
          export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)
          source ci/scripts/repository.sh
          cd repository && eval ${{ inputs.run_before }}
        env:
          NEXT_VERSION: ${{ inputs.release_version }}
      - name: Set release version ${{ inputs.release_version }}
        run: |
          export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)
          source ci/scripts/utils.sh
          cd repository && setReleaseVersion
        env:
          NEXT_VERSION: ${{ inputs.release_version }}
      - name: Commit and Push
        uses: windup/windup-pipelines/actions/commit@main
        with:
          working-directory: repository
          branch: ${{ inputs.branch }}
          commit_message: "üèÅ Releasing version ${{ inputs.release_version }}"
      - name: Maven install
        if: ${{ inputs.skip_maven_release == true }}
        run: |
          export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)          
          cd repository && mvn install -DskipTests -s $SETTINGS_XML
      - name: Release to OSSRH
        if: ${{ inputs.skip_maven_release != true }}
        run: |
          export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)
          export GPG_SCRIPT=$(readlink -f ci/scripts/gpghack.sh)
          source ci/scripts/utils.sh
          cd repository && release
        env:
          MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Setup JReleaser
        run: |
          cp ci/${{ inputs.jreleaser_file }} repository/jreleaser.yml
      - name: JReleaser
        uses: jreleaser/release-action@v2
        with:
          working-directory: repository
          arguments: full-release
          java-opts: -Xms1024M -Xmx2048M
          setup-java: false
        env:
          JRELEASER_PROJECT_VERSION: ${{ inputs.release_version }}
          JRELEASER_PREVIOUS_TAG_NAME: ${{ inputs.previous_released_version }}
          JRELEASER_TAG_NAME: ${{ inputs.release_version }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_PAT }}
          JRELEASER_PRERELEASE_PATTERN: .*(?:Alpha|alpha|Beta|beta)[0-9]
      - name: JReleaser - generate log
        if: always()
        working-directory: repository
        run: tar -czvf jreleaser-log.tgz out/
      - name: JReleaser - upload log
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.repository }}-jreleaser-log
          path: "repository/jreleaser-log.tgz"
      - name: Set next development version ${{ inputs.next_development_version }}
        run: |
          export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)
          source ci/scripts/utils.sh
          cd repository && setNextDevelopmentVersion
        env:
          NEXT_VERSION: ${{ inputs.next_development_version }}
      - name: Run After script
        if: ${{ inputs.run_after }}
        run: |
          export SETTINGS_XML=$(readlink -f ci/maven/settings.xml)
          source ci/scripts/repository.sh
          cd repository && eval ${{ inputs.run_after }}
        env:
          NEXT_VERSION: ${{ inputs.next_development_version }}
      - name: Commit and Push
        uses: windup/windup-pipelines/actions/commit@main
        with:
          working-directory: repository
          branch: ${{ inputs.branch }}
          commit_message: "‚¨ÜÔ∏è Next version ${{ inputs.next_development_version }}"
      - run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
